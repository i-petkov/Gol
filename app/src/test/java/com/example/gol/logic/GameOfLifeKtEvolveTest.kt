package com.example.gol.logic

import org.junit.Test

class GameOfLifeKtEvolveTest {
    private val blinker = listOf(
        listOf(
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_'),
            listOf('_', '_', '_', '_', '_')
        ),
        listOf(
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '*', '*', '*', '_'),
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_')
        ),
        listOf(
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_'),
            listOf('_', '_', '_', '_', '_')
        ),
        listOf(
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '*', '*', '*', '_'),
            listOf('_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_')
        )
    )
    private val glider = listOf(
        listOf(
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '*', '_', '_', '_'),
            listOf('_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '*', '*', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_')
        ),
        listOf(
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '*', '_', '*', '_', '_'),
            listOf('_', '_', '_', '*', '*', '_', '_'),
            listOf('_', '_', '_', '*', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_')
        ),
        listOf(
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '*', '_', '_'),
            listOf('_', '_', '_', '*', '*', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_')
        ),
        listOf(
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '*', '_', '_', '_'),
            listOf('_', '_', '_', '_', '*', '*', '_'),
            listOf('_', '_', '_', '*', '*', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_')
        )
    )
    private val pulsar = listOf(
        listOf(
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '*', '*', '*', '_', '_', '_', '*', '*', '*', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '*', '_', '_', '_', '_', '*', '_', '*', '_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_', '_', '_', '*', '_', '*', '_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_', '_', '_', '*', '_', '*', '_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '_', '_', '*', '*', '*', '_', '_', '_', '*', '*', '*', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '*', '*', '*', '_', '_', '_', '*', '*', '*', '_', '_', '_', '_'),
            listOf('_', '_', '*', '_', '_', '_', '_', '*', '_', '*', '_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_', '_', '_', '*', '_', '*', '_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '*', '_', '_', '_', '_', '*', '_', '*', '_', '_', '_', '_', '*', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '*', '*', '*', '_', '_', '_', '*', '*', '*', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_')
        ),
        listOf(
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '*', '_', '_', '_', '*', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '*', '*', '*', '_', '_', '*', '*', '_', '*', '*', '_', '_', '*', '*', '*', '_'),
            listOf('_', '_', '_', '*', '_', '*', '_', '*', '_', '*', '_', '*', '_', '*', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '*', '_', '_', '_', '*', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '*', '_', '_', '_', '*', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '*', '_', '*', '_', '*', '_', '*', '_', '*', '_', '*', '_', '_', '_'),
            listOf('_', '*', '*', '*', '_', '_', '*', '*', '_', '*', '*', '_', '_', '*', '*', '*', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '*', '_', '_', '_', '*', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_', '*', '_', '_', '_', '_', '_'),
            listOf('_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_')
        )
    )

    private val factory = object : TileFactory<Char> {
        val liveTile = '*'
        val deadTile = '_'
        override fun createAliveTile(): Char = liveTile

        override fun createDeadTile(): Char = deadTile

        override fun isTileAlive(tile: Char): Boolean = tile == liveTile
    }

    @Test
    fun evolve_blinker() {
        for (index in 0 until blinker.lastIndex) {
            val expected = blinker[index + 1]
            val actual = blinker[index].evolve(factory)
            assert(expected.contentDeepEquals(actual)) {
                """
                    #blinker::(stage: $index")
                    #                  
                    #expected:
                    #${expected.joinToString { it.joinToString(prefix = "[", postfix = "]") }}
                    #
                    #actual:   
                    #${actual.joinToString { it.joinToString(prefix = "[", postfix = "]") }}
                """.trimMargin("#")
            }
        }
    }

    @Test
    fun evolve_glider() {
        for (index in 0 until glider.lastIndex) {
            val expected = glider[index + 1]
            val actual = glider[index].evolve(factory)
            assert(expected.contentDeepEquals(actual)) {
                """
                    #blinker::(stage: $index")
                    #                  
                    #expected:
                    #${expected.joinToString { it.joinToString(prefix = "[", postfix = "]") }}
                    #
                    #actual:   
                    #${actual.joinToString { it.joinToString(prefix = "[", postfix = "]") }}
                """.trimMargin("#")
            }
        }
    }

    @Test
    fun evolve_pulsar() {
        for (index in 0 until pulsar.lastIndex) {
            val expected = pulsar[index + 1]
            val actual = pulsar[index].evolve(factory)
            assert(expected.contentDeepEquals(actual)) {
                """
                    #pulsar::(stage: $index")
                    #                  
                    #expected:
                    #${expected.joinToString { it.joinToString(prefix = "[", postfix = "]") }}
                    #
                    #actual:   
                    #${actual.joinToString { it.joinToString(prefix = "[", postfix = "]") }}
                """.trimMargin("#")
            }
        }
    }

}
